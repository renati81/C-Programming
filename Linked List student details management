#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//struct declartion for storing student details - 10 mins
struct Student {
    char name[50];
    int id;
    int gradeArray[10];
    float Avg_grade;
    struct Student *next;
};

struct Student *head = NULL;

//Function for avg gardes - 30 mins
void calculateAverage(struct Student *student) {
    int sum = 0;
    for (int i = 0; i < 10; i++) {
        sum += student->gradeArray[i];
    }
    student->Avg_grade = (float)sum / 10;
}

// Function to create a new student, memory, name, id, gardes - 30mins
struct Student *createStudent(char *name, int id, int grades[]) {
    struct Student *newStudent = (struct Student *)malloc(sizeof(struct Student));
    strcpy(newStudent->name, name);
    newStudent->id = id;
    for (int i = 0; i < 10; i++) {
        newStudent->gradeArray[i] = grades[i];
    }
    calculateAverage(newStudent);
    newStudent->next = NULL;
    return newStudent;
}



// Function to insert a student at the beginning of the linked list - 25mins
void insertAtBeginning(struct Student *newStudent) {
    newStudent->next = head;
    head = newStudent;
}

// Function to print the student list - 20 mins
void printStudentList() {
    struct Student *current = head;
    printf("\nStudent List:\n");
    printf("----------------------------------\n");
    printf("ID|  Student Name  | Average Grade\n");
    printf("----------------------------------\n");
    while (current != NULL) {
        printf("%d |   %s   | %.2f\n", current->id, current->name, current->Avg_grade);
        current = current->next;
    }
    printf("----------------------------------\n");
}

// Function to delete a student details based on their ID - 45 mins
void deleteStudent(int id) {
    struct Student *current = head, *prev = NULL;
    while (current != NULL && current->id != id) {
        prev = current;
        current = current->next;
    }
    if (current == NULL) {
        printf("\nStudent with ID %d not found.\n", id);
        return;
    }
    if (prev == NULL) { // First node
        head = current->next;
    } else {
        prev->next = current->next;
    }
    free(current);
    printf("Student with ID %d deleted.\n", id);
}

// Function to calculate the class average - 25 mins
float calculateClassAverage() {
    struct Student *current = head;
    float totalAvg = 0;
    int count = 0;
    while (current != NULL) {
        totalAvg += current->Avg_grade;
        count++;
        current = current->next;
    }
    return totalAvg / count;
}
//this takes 30 mins
int main() {
    // Create students and insert them into the linked list
    insertAtBeginning(createStudent("Sai Sruthi", 1, (int[]){10, 20, 30, 40, 50, 60, 70, 80, 90, 100}));
    insertAtBeginning(createStudent("Sai Sruthi", 2, (int[]){12, 22, 32, 42, 52, 62, 72, 82, 92, 100}));
    insertAtBeginning(createStudent("Sai Sruthi", 3, (int[]){13, 23, 33, 43, 53, 63, 73, 83, 93, 100}));
    insertAtBeginning(createStudent("Sai Sruthi", 4, (int[]){15, 25, 35, 45, 55, 65, 75, 85, 95, 100}));
    insertAtBeginning(createStudent("Sai Sruthi", 5, (int[]){15, 25, 35, 45, 55, 65, 75, 85, 95, 100}));
    insertAtBeginning(createStudent("Sai Sruthi", 6, (int[]){16, 26, 36, 46, 56, 66, 76, 86, 96, 100}));
    insertAtBeginning(createStudent("Sai Sruthi", 7, (int[]){17, 27, 37, 47, 57, 67, 77, 87, 97, 100}));
    insertAtBeginning(createStudent("Sai Sruthi", 8, (int[]){18, 28, 38, 48, 58, 68, 78, 88, 98, 100}));

    // Print the student list before deletions
    printStudentList();

    // Calculate and print the class average before deletions
    printf("\nClass Average: %.2f\n", calculateClassAverage());

    // Delete students with ID 2 and 4
    deleteStudent(2);
    deleteStudent(4);

    // Print the student list after deletions
    printStudentList();

    // Calculate and print the class average after deletions
    printf("\nClass Average After Deletions: %.2f\n", calculateClassAverage());

    return 0;
}
